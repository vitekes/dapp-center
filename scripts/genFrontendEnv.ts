// #!/usr/bin/env ts-node
// /**
//  * Обновляет .env.local и копирует ABI в директорию src/abi
//  * Запуск:  ts-node scripts/genFrontendEnv.ts <network>
//  */
// import { promises as fs } from "fs";
// import path from "path";
// import { fileURLToPath } from "url";
//
// // ───────────── универсальное __dirname / __filename ─────────────
// const __filenameFix =
//     typeof __filename !== "undefined"
//         // CJS (ts-node по умолчанию)
//         ? __filename
//         // ESM
//         : fileURLToPath(import.meta.url);
//
// const __dirnameFix = path.dirname(__filenameFix);
// // ----------------------------------------------------------------
//
// // соответствие «контракт → имя переменной в .env»
// const map: Record<string, string> = {
//     SoulboundBadge: "NEXT_PUBLIC_SOULBOUND_BADGE_ADDRESS",
//     DonationContract: "NEXT_PUBLIC_DONATION_CONTRACT_ADDRESS",
//     Profile: "NEXT_PUBLIC_PROFILE_ADDRESS",
// };
//
// // соответствие «сеть → chainId»
// const chainIdMap: Record<string, number> = {
//     hardhat: 31337,
//     localhost: 31337,
//     sepolia: 11155111,
//     mainnet: 1,
// };
//
//
// // Список контрактов, для которых нужно обновить ABI
// const contractsToUpdateAbi = ["SoulboundBadge", "DonationContract", "Profile"];
//
// async function main(): Promise<void> {
//     const network = process.argv[2] ?? "hardhat";
//
//     const deploymentsDir = path.join(__dirnameFix, "..", "deployments", network);
//
//     // Проверяем существование папки deployments
//     if (!await fs.stat(deploymentsDir).catch(() => false)) {
//         console.error(`✖  Не найдено ${deploymentsDir}. Сначала: npx hardhat deploy --network ${network}`);
//         process.exit(1);
//     }
//
//     const envLines = ["# autogenerated by scripts/genFrontendEnv.ts"];
//
//     const chainId = chainIdMap[network] ?? 31337;
//     envLines.push(`NEXT_PUBLIC_CHAIN_ID=${chainId}`);
//
//     // Обрабатываем каждый файл в папке deployments
//     for (const file of await fs.readdir(deploymentsDir)) {
//         if (!file.endsWith(".json")) continue;
//
//         const contractName = path.basename(file, ".json");
//         const varName = map[contractName];
//
//         try {
//             const deploymentContent = await fs.readFile(path.join(deploymentsDir, file), "utf-8");
//             const deploymentJson = JSON.parse(deploymentContent);
//             const {address, abi} = deploymentJson;
//
//             // Добавляем адрес в переменные окружения (если он определен в map)
//             if (varName) {
//                 envLines.push(`${varName}=${address}`);
//             }
//
//             // Обновляем ABI файл, если контракт в списке
//             if (contractsToUpdateAbi.includes(contractName)) {
//                 await updateAbi(contractName, abi);
//             }
//         } catch (e) {
//             console.error(`✖  Ошибка при обработке ${file}: ${e}`);
//         }
//     }
//
//     envLines.push(""); // Добавляем пустую строку в конце
//
//     // Определяем директорию для .env.local
//     const envDir = path.join(__dirnameFix, "..");
//
//     const envPath = path.join(envDir, ".env.local");
//     await fs.writeFile(envPath, envLines.join("\n"), "utf-8");
//     console.log(`✅  .env.local обновлен в ${envPath}`);
// }
//
// /**
//  * Обновляет ABI для указанного контракта
//  */
// async function updateAbi(contractName: string, abi: Record<string, unknown>[] | Record<string, unknown>): Promise<void> {
//     try {
//         // Определяем путь к папке src/abi
//         const rootDir = path.join(__dirnameFix, "..");
//         const abiDir = path.join(rootDir, "src", "abi");
//
//         // Создаем директорию abi, если не существует
//         await fs.mkdir(abiDir, {recursive: true});
//
//         // Записываем ABI в файл
//         const abiPath = path.join(abiDir, `${contractName}.json`);
//         const abiContent = JSON.stringify(abi, null, 2);
//         await fs.writeFile(abiPath, abiContent, "utf-8");
//
//         console.log(`✅  ABI для ${contractName} обновлен в ${abiPath}`);
//     } catch (e) {
//         console.error(`✖  Ошибка при обновлении ABI для ${contractName}: ${e}`);
//     }
// }
//
// main().catch((err) => {
//     console.error(err);
//     process.exit(1);
// });